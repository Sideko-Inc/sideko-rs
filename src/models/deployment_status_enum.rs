/// File Generated by Sideko (sideko.dev)
#[derive(serde::Serialize, serde::Deserialize, Debug, Default, Clone)]
#[cfg_attr(feature = "cli", derive(clap::ValueEnum))]
pub enum DeploymentStatusEnum {
    #[default]
    #[cfg_attr(feature = "cli", value(name = "Building"))]
    #[serde(rename = "Building")]
    Building,
    #[cfg_attr(feature = "cli", value(name = "Cancelled"))]
    #[serde(rename = "Cancelled")]
    Cancelled,
    #[cfg_attr(feature = "cli", value(name = "Complete"))]
    #[serde(rename = "Complete")]
    Complete,
    #[cfg_attr(feature = "cli", value(name = "Created"))]
    #[serde(rename = "Created")]
    Created,
    #[cfg_attr(feature = "cli", value(name = "Error"))]
    #[serde(rename = "Error")]
    Error,
    #[cfg_attr(feature = "cli", value(name = "Generated"))]
    #[serde(rename = "Generated")]
    Generated,
}
impl std::fmt::Display for DeploymentStatusEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let str_val = match self {
            DeploymentStatusEnum::Building => "Building",
            DeploymentStatusEnum::Cancelled => "Cancelled",
            DeploymentStatusEnum::Complete => "Complete",
            DeploymentStatusEnum::Created => "Created",
            DeploymentStatusEnum::Error => "Error",
            DeploymentStatusEnum::Generated => "Generated",
        };
        write!(f, "{}", str_val)
    }
}
