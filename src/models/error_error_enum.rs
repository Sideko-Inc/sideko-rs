/// File Generated by Sideko (sideko.dev)
#[derive(serde::Serialize, serde::Deserialize, Debug, Default, Clone)]
#[cfg_attr(feature = "cli", derive(clap::ValueEnum))]
pub enum ErrorErrorEnum {
    #[default]
    #[cfg_attr(feature = "cli", value(name = "Bad Request"))]
    #[serde(rename = "Bad Request")]
    BadRequest,
    #[cfg_attr(feature = "cli", value(name = "forbidden"))]
    #[serde(rename = "forbidden")]
    Forbidden,
    #[cfg_attr(feature = "cli", value(name = "insufficient_features"))]
    #[serde(rename = "insufficient_features")]
    InsufficientFeatures,
    #[cfg_attr(feature = "cli", value(name = "internal_server_error"))]
    #[serde(rename = "internal_server_error")]
    InternalServerError,
    #[cfg_attr(feature = "cli", value(name = "invalid_openapi"))]
    #[serde(rename = "invalid_openapi")]
    InvalidOpenapi,
    #[cfg_attr(feature = "cli", value(name = "invalid_url"))]
    #[serde(rename = "invalid_url")]
    InvalidUrl,
    #[cfg_attr(feature = "cli", value(name = "not_found"))]
    #[serde(rename = "not_found")]
    NotFound,
    #[cfg_attr(feature = "cli", value(name = "unauthorized"))]
    #[serde(rename = "unauthorized")]
    Unauthorized,
    #[cfg_attr(feature = "cli", value(name = "unavailable_subdomain"))]
    #[serde(rename = "unavailable_subdomain")]
    UnavailableSubdomain,
}
impl std::fmt::Display for ErrorErrorEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let str_val = match self {
            ErrorErrorEnum::BadRequest => "Bad Request",
            ErrorErrorEnum::Forbidden => "forbidden",
            ErrorErrorEnum::InsufficientFeatures => "insufficient_features",
            ErrorErrorEnum::InternalServerError => "internal_server_error",
            ErrorErrorEnum::InvalidOpenapi => "invalid_openapi",
            ErrorErrorEnum::InvalidUrl => "invalid_url",
            ErrorErrorEnum::NotFound => "not_found",
            ErrorErrorEnum::Unauthorized => "unauthorized",
            ErrorErrorEnum::UnavailableSubdomain => "unavailable_subdomain",
        };
        write!(f, "{}", str_val)
    }
}
